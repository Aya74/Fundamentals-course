(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{105:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return s})),a.d(t,"toc",(function(){return l})),a.d(t,"default",(function(){return i}));var n=a(3),o=a(7),r=(a(0),a(225)),c={},s={unversionedId:"Week 05/session-13/javascript-objects",id:"Week 05/session-13/javascript-objects",isDocsHomePage:!1,title:"javascript-objects",description:"What are JavaScript Objects?",source:"@site/../coursebook/Week 05/session-13/javascript-objects.md",slug:"/Week 05/session-13/javascript-objects",permalink:"/Fundamentals-course/Week 05/session-13/javascript-objects",editUrl:"https://github.com/gazaskygeeks/Fundamentals-course/edit/master/website/../coursebook/Week 05/session-13/javascript-objects.md",version:"current",sidebar:"someSidebar",previous:{title:"exercises",permalink:"/Fundamentals-course/Week 05/session-13/exercises"},next:{title:"learning-outcomes",permalink:"/Fundamentals-course/Week 05/session-13/learning-outcomes"}},l=[{value:"What are JavaScript Objects?",id:"what-are-javascript-objects",children:[]},{value:"JavaScript Objects Syntax",id:"javascript-objects-syntax",children:[]},{value:"Object Properties",id:"object-properties",children:[{value:"Accessing properties of an object",id:"accessing-properties-of-an-object",children:[]},{value:"Looping through an object properties",id:"looping-through-an-object-properties",children:[]},{value:"Adding and deleting properties",id:"adding-and-deleting-properties",children:[]}]},{value:"JavaScript Object Methods",id:"javascript-object-methods",children:[{value:"Built-In Methods",id:"built-in-methods",children:[]}]},{value:"JavaScript Objects Are Mutable",id:"javascript-objects-are-mutable",children:[]}],b={toc:l};function i(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"what-are-javascript-objects"},"What are JavaScript Objects?"),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Objects"),", in JavaScript, it\u2019s the most important data-type, and forms the building block for modern JavaScript. These objects are quite different from JavaScript\u2019s primitive data-types(Number, String, Boolean, null, undefined, and symbol) in the sense that while these primitive data-types all store a single value each (depending on their types)."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Simply ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("em",{parentName:"strong"},"JavaScript Object"))," is a collection of key-value pairs. Each key-value pair is called as a property.")),Object(r.b)("blockquote",null),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Objects are more complex and each object may contain any combination of these primitive data-types as well as object data-types.")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const human = {\n  firstName: "Virat",\n  lastName: "Kohli",\n  age: 30,\n  yearOfExperience: {\n    marketing: 1,\n    accounting: 2,\n  },\n  greeting: function () {\n    return "Hello";\n  },\n};\n')),Object(r.b)("h2",{id:"javascript-objects-syntax"},"JavaScript Objects Syntax"),Object(r.b)("p",null,"An object can be created with curly brackets {\u2026} with an optional list of properties. A property is a \u201ckey: value\u201d pair, where a key is a string (also called a \u201cproperty name\u201d), and value can be anything."),Object(r.b)("p",null,"To understand this rather abstract definition, let us look at an example of a JavaScript Object:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'const person = {\n  firstName: "John",\n  lastName: "Doe",\n  age: 50,\n  eyeColor: "blue",\n};\n')),Object(r.b)("p",null,"In the above example ",Object(r.b)("strong",{parentName:"p"},"\u201cfirstName\u201d, \u201clastName\u201d, \u201cage\u201d , \u201ceyeColor\u201d")," are all ",Object(r.b)("strong",{parentName:"p"},"\u201ckeys\u201d")," and ",Object(r.b)("strong",{parentName:"p"},"\u201cJohn\u201d, \u201cDoe\u201d, 50 and \u201cblue\u201d")," are ",Object(r.b)("strong",{parentName:"p"},"values")," of these keys respectively."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Keys are converted to strings by JavaScript and we will touch more on that later when we get to accessing the keys values")),Object(r.b)("h2",{id:"object-properties"},"Object Properties"),Object(r.b)("p",null,"Each of the object keys is referred to as the ",Object(r.b)("strong",{parentName:"p"},"properties")," of the object.\nProperties can usually be changed, added, and deleted, but some are read-only."),Object(r.b)("h3",{id:"accessing-properties-of-an-object"},"Accessing properties of an object"),Object(r.b)("p",null,"Object members(properties or methods) can be accessed using two different ways:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Dot Notation"),":"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"objectName.propertyKey; //person.age\n")))),Object(r.b)("p",null,"For example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'const school = {\n  name: "Vivekanada School",\n  location: "Delhi",\n  established: 1995,\n  20: 1000,\n};\n\nconsole.log(school.name); // Output: Vivekanada School\n')),Object(r.b)("ol",{start:2},Object(r.b)("li",{parentName:"ol"},Object(r.b)("strong",{parentName:"li"},"Bracket Notation"))),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'objectName["property"]; // person["age"]\n')),Object(r.b)("p",null,"Or"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'objectName[expression]; // const x= "age"; person[x]\n')),Object(r.b)("p",null,"Let's take the same example above but try to access the properties using the bracket notation."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'const city = "location";\nlet school = {\n  name: "Vivekanada School",\n  location: "Delhi",\n  established: 1995,\n  20: 1000,\n};\n\nconsole.log(school["name"]); // Output : Vivekanada School\n\nconsole.log(school[city]); // Output: Delhi\n')),Object(r.b)("p",null,"By careful how to access JavaScript properites, Check lines below"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"console.log(school[name]); // ReferenceError: name is not defined\n\nconsole.log(school.'location') // SyntaxError: Unexpected string\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"That's confusing to JS as it would expect name to be variable, So be aware at Bracket Notation, your ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("em",{parentName:"strong"},"key has to be a string")),".")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"The main differences between the two methods are"),":"),Object(r.b)("p",null,"Unlike the dot notation, the bracket keyword works with any string combination, including, but not limited to multi-word strings. Also if key is number we can't access value using dot notation."),Object(r.b)("p",null,"For example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'    // check school object above\n    console.log(school.20); // Gives error\n    console.log(school[20]); // Output: 1000\n\n    somePerson.first name // invalid\n    somePerson["first name"] // valid\n')),Object(r.b)("p",null,"Unlike the dot notation, the bracket notation can also contain names which are results of any expressions variables whose values are computed at run-time."),Object(r.b)("p",null,"For instance :"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'let key = "first name";\nsomePerson[key] = "Name Surname";\n')),Object(r.b)("p",null,"Similar operations are not possible while using the dot notation."),Object(r.b)("h3",{id:"looping-through-an-object-properties"},"Looping through an object properties"),Object(r.b)("p",null,"To iterate over all existing enumerable keys of an object, we may use the ",Object(r.b)("strong",{parentName:"p"},"for...in")," construct."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Syntax")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"for (variable in object) {\n  // code to be executed\n}\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Note"),": The block of code inside of the for...in loop will be executed once for each key."),Object(r.b)("p",null,"Let's take an example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'const person = { fname: "John", lname: "Doe", age: 25 };\n\nfor (x in person) {\n  console.log(x); // will log fname, lname, and age\n}\n')),Object(r.b)("h3",{id:"adding-and-deleting-properties"},"Adding and deleting properties"),Object(r.b)("h4",{id:"adding-new-properties"},"Adding New Properties"),Object(r.b)("p",null,"You can add new properties to an existing object by simply giving it a value."),Object(r.b)("p",null,"Assume that the person object already exists - you can then give it new properties:"),Object(r.b)("p",null,"Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'person.nationality = "English";\n\nconsole.log(person); // log { fname: "John", lname: "Doe", age: 25, nationality: "English" }\n')),Object(r.b)("h4",{id:"deleting-properties"},"Deleting Properties"),Object(r.b)("p",null,"To Delete a property of an object we can make use ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("em",{parentName:"strong"},"delete"))," opreator."),Object(r.b)("p",null,"Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'const person = {\n  name: "Joe",\n};\n\nconsole.log(person.name); // Output : Name\ndelete person.name;\n\nconsole.log(person.name); // Output : undefined\n')),Object(r.b)("h2",{id:"javascript-object-methods"},"JavaScript Object Methods"),Object(r.b)("p",null,"A method is a function associated with an object, or, simply put a method is a property of an object that is a function. Methods are defined the way normal functions are defined, except that they have to be assigned as the property of an object."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Simply ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("em",{parentName:"strong"},"method"))," is a function declared as JavaSript object property")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'const person = {\n  firstName: "John",\n  lastName: "Doe",\n  id: 5566,\n  fullName: function () {\n    return this.firstName + " " + this.lastName; // don\'t worry about this keyword right now!\n  },\n};\n')),Object(r.b)("p",null,"You access an object method with the following syntax:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"objectName.methodName();\n")),Object(r.b)("p",null,"You will typically describe fullName() as a method of the person object, and fullName as a property."),Object(r.b)("p",null,"The ",Object(r.b)("strong",{parentName:"p"},"fullName")," property will execute (as a function) when it is ",Object(r.b)("strong",{parentName:"p"},"invoked")," with ()."),Object(r.b)("p",null,"This example accesses the fullName() method of a person object:"),Object(r.b)("p",null,"Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"name = person.fullName();\n")),Object(r.b)("h3",{id:"built-in-methods"},"Built-In Methods"),Object(r.b)("p",null,"There some built in methods that we can use with JavaScript objects and they can be really beneficial sometimes like:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Object.keys()"),": creates an array containing the keys of an object.")),Object(r.b)("p",null,"Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'// Initialize an object\nconst employees = {\n  boss: "Michael",\n  secretary: "Pam",\n  sales: "Jim",\n  accountant: "Oscar",\n};\n\n// Get the keys of the object\nconst keys = Object.keys(employees);\n\nconsole.log(keys);\n')),Object(r.b)("p",null,"Output"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript="}),'["boss", "secretary", "sales", "accountant"];\n')),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Object.values"),": creates an array containing the values of an object.")),Object(r.b)("p",null,"Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'// Initialize an object\nconst session = {\n  id: 1,\n  time: `26-July-2018`,\n  device: "mobile",\n  browser: "Chrome",\n};\n\n// Get all values of the object\nconst values = Object.values(session);\n\nconsole.log(values);\n')),Object(r.b)("p",null,"Output"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'[1, "26-July-2018", "mobile", "Chrome"];\n')),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Object.hasOwnProperty"),": returns a boolean indicating whether the object has the specified property as its own property.")),Object(r.b)("p",null,"Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'const object1 = new Object();\nobject1.property1 = 42;\n\nconsole.log(object1.hasOwnProperty("property1"));\n// expected output: true\n')),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"These are not the only built-in methods and arrays are going to be disscused in the next session so it's fine you don't need to know them very well now")),Object(r.b)("h2",{id:"javascript-objects-are-mutable"},"JavaScript Objects Are Mutable"),Object(r.b)("p",null,"Objects are mutable: They are addressed by reference, not by value."),Object(r.b)("p",null,"If person is an object, the following statement will not create a copy of person:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"let x = person; // This will not create a copy of person.\n")),Object(r.b)("p",null,"The object ",Object(r.b)("strong",{parentName:"p"},"x")," is not a copy of ",Object(r.b)("strong",{parentName:"p"},"person"),". It is person. Both x and person are the same object."),Object(r.b)("p",null,"Any changes to x will also change person, because x and person are the same object."),Object(r.b)("p",null,"Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'const person = {\n  firstName: "John",\n  lastName: "Doe",\n  age: 50,\n  eyeColor: "blue",\n};\n\nlet x = person;\nx.age = 10; // This will change both x.age and person.age\n')),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Objects mutability maybe an advanced topic but it's good to get an idea about it from now so it's okay if you don't fully understand it.")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"When you want to copy an object try not to mutate it.")))}i.isMDXComponent=!0},225:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return m}));var n=a(0),o=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var b=o.a.createContext({}),i=function(e){var t=o.a.useContext(b),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=i(e.components);return o.a.createElement(b.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},j=o.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,c=e.parentName,b=l(e,["components","mdxType","originalType","parentName"]),p=i(a),j=n,m=p["".concat(c,".").concat(j)]||p[j]||u[j]||r;return a?o.a.createElement(m,s(s({ref:t},b),{},{components:a})):o.a.createElement(m,s({ref:t},b))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,c=new Array(r);c[0]=j;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,c[1]=s;for(var b=2;b<r;b++)c[b]=a[b];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,a)}j.displayName="MDXCreateElement"}}]);
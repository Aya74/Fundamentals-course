(window.webpackJsonp=window.webpackJsonp||[]).push([[138],{208:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return l}));var a=t(3),r=t(7),o=(t(0),t(225)),i={},c={unversionedId:"Week 05/session-12/intro-to-functions",id:"Week 05/session-12/intro-to-functions",isDocsHomePage:!1,title:"intro-to-functions",description:"JavaScript Functions",source:"@site/../coursebook/Week 05/session-12/intro-to-functions.md",slug:"/Week 05/session-12/intro-to-functions",permalink:"/Fundamentals-course/Week 05/session-12/intro-to-functions",editUrl:"https://github.com/gazaskygeeks/Fundamentals-course/edit/master/website/../coursebook/Week 05/session-12/intro-to-functions.md",version:"current",sidebar:"someSidebar",previous:{title:"homework",permalink:"/Fundamentals-course/Week 05/session-12/homework"},next:{title:"learning-outcomes",permalink:"/Fundamentals-course/Week 05/session-12/learning-outcomes"}},s=[{value:"JavaScript Functions",id:"javascript-functions",children:[]},{value:"Function Declaration",id:"function-declaration",children:[]},{value:"Function Invocation (calling a function)",id:"function-invocation-calling-a-function",children:[]},{value:"Function Parameters",id:"function-parameters",children:[]},{value:"Function Arguments",id:"function-arguments",children:[]},{value:"Multiple Parameters",id:"multiple-parameters",children:[]},{value:"Function Return",id:"function-return",children:[]},{value:"Function Expression",id:"function-expression",children:[]}],u={toc:s};function l(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},u,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"javascript-functions"},"JavaScript Functions"),Object(o.b)("p",null,"A JavaScript ",Object(o.b)("strong",{parentName:"p"},"function")," is a block of code designed to perform a particular task. The main advantage of using functions is code ",Object(o.b)("strong",{parentName:"p"},"reuse"),": Define the code once, and use it many times."),Object(o.b)("p",null,"Use the same code many times with different arguments, to produce different results."),Object(o.b)("h2",{id:"function-declaration"},"Function Declaration"),Object(o.b)("p",null,"To define a JavaScript function, we use the ",Object(o.b)("inlineCode",{parentName:"p"},"function")," keyword, followed by a ",Object(o.b)("strong",{parentName:"p"},"name")," followed by a set of ",Object(o.b)("strong",{parentName:"p"},"parentheses ()"),"."),Object(o.b)("p",null,"The code to be executed by the function is placed inside curly brackets {}."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function name() {\n  // code to be executed\n}\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Note:")," Function names can contain letters, digits, underscores, and dollar signs (same rules as variables) written in camel case. In addition, it's a best practice to actually tell what the function is doing by giving the function name a verb as prefix. This verb as prefix can be anything (e.g. get, fetch, push, apply, calculate, compute, post). It's a soft rule to consider for having more self-descriptive JavaScript functions."),Object(o.b)("p",null,"Let's write our first function."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// Here, we are declaring a function named sayHello that would log Hello World when it is called\nfunction sayHello() {\n  console.log("Hello World");\n}\n')),Object(o.b)("h2",{id:"function-invocation-calling-a-function"},"Function Invocation (calling a function)"),Object(o.b)("p",null,"To execute the code inside the function you need to invoke it (call it). To call a function, start with the name of the function, then follow it with the parentheses."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// Declaring a function named greet\nfunction greet() {\n  console.log("Welcome to the FUNdamentals course.");\n}\n\n// Calling the function\ngreet(); // Logs: Welcome to the FUNdamentals course.\n')),Object(o.b)("p",null,"Once the function is defined, JavaScript allows us to call it as many times as we want to."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// We want to keep saying that Javascript is fun, let\'s declare a function to do it!\nfunction printJsIsFun() {\n  console.log("JavaScript is FUN!");\n}\n\n// Calling the function\nprintJsIsFun(); // Logs: JavaScript is FUN!\n\n// Calling the function again\nprintJsIsFun(); // Logs: JavaScript is FUN!\n\n// And again\nprintJsIsFun(); // Logs: JavaScript is FUN!\n')),Object(o.b)("h2",{id:"function-parameters"},"Function Parameters"),Object(o.b)("p",null,"Function can take parameters. Function ",Object(o.b)("strong",{parentName:"p"},"parameters")," are the names listed inside the parentheses () in the function's definition."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function name(param1, param2, param3) {\n  // some code\n}\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Note:")," As with variables, parameters should be given ",Object(o.b)("strong",{parentName:"p"},"names"),", which are separated by commas within the parentheses."),Object(o.b)("p",null,"After defining the parameters, you can use them inside the function."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// This function takes in one parameter, which is called name\nfunction sayHello(name) {\n  console.log("Hello, " + name);\n}\n')),Object(o.b)("h2",{id:"function-arguments"},"Function Arguments"),Object(o.b)("p",null,"Function ",Object(o.b)("strong",{parentName:"p"},"arguments")," are the real values passed to (and received by) the function. When calling a function, we provide the parameters value ",Object(o.b)("strong",{parentName:"p"},"(arguments)")," inside the parentheses. We can define a single function, and pass different parameter values ",Object(o.b)("strong",{parentName:"p"},"(arguments)")," to it."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// This will execute the function\'s code each time for the provided argument\n\nfunction sayMyName(name) {\n  console.log("My name is " + name);\n}\n\n// Here, the argument "Heisenberg" is the value of the parameter name\nsayMyName("Heisenberg"); // Logs: My name is Heisenberg\n\n// Here, the argument "Turing" is the value of the parameter name\nsayMyName("Turing"); // Logs: Mu name is Turing\n')),Object(o.b)("h2",{id:"multiple-parameters"},"Multiple Parameters"),Object(o.b)("p",null,"We can define multiple parameters for a function by comma-separating them."),Object(o.b)("p",null,"When calling a function, we must provide the arguments in the same order in which we defined them."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// This function takes in two parameters: name and age\nfunction printPersonDetails(name, age) {\n  console.log(name + "is" + age + " years old.");\n}\n\nprintPersonDetails("Mark", 27); // Logs: Mark is 27 years old.\n')),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Note:")," JavaScript functions do not check the number of arguments received. If a function is called with missing arguments (fewer than declared), the missing values are set to ",Object(o.b)("inlineCode",{parentName:"p"},"undefined"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'function sayGreeting(greeting) {\n  console.log(greeting);\n}\n\nsayGreeting("Hello"); // Logs: Hello\nsayGreeting("Hi"); // Logs: Hi\n\n// Notice, we are not passing any arguments for this call\nsayGreeting(); // Logs: undefined\n')),Object(o.b)("h2",{id:"function-return"},"Function Return"),Object(o.b)("p",null,"A function can have an optional ",Object(o.b)("inlineCode",{parentName:"p"},"return")," statement. It is used to return a value from the function. This statement is useful when making calculations that require a result. For example, let's calculate the product of two numbers, and return the result:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function findProduct(a, b) {\n  return a * b; // Function returns the product of a and b\n}\n\nconst product = findProduct(5, 3); // Function is called, return value will end up in product\nconsole.log(product); // Logs: 15\n")),Object(o.b)("p",null,"If we do not return anything from a function, it will return undefined."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"/* This function takes two parameters, calculate their sum then logs it BUT it doesn't have a return statement.\nEven though it logs the sum, it returns undefined */\nfunction findSum(a, b) {\n  const sum = a + b;\n  console.log(sum);\n}\n\nconst result = findSum(5, 7); // Logs: 12\nconsole.log(result); // Logs: undefined\n")),Object(o.b)("p",null,"When JavaScript reaches a return statement, the function stops executing."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'function printNumber() {\n  console.log("one");\n  return;\n  console.log("two");\n}\n\nprintNumber(); // Logs: one\n// Function stop executing before it can get to the second log statement due to the return statement before it\n')),Object(o.b)("h2",{id:"function-expression"},"Function Expression"),Object(o.b)("p",null,"A JavaScript function can also be defined using an ",Object(o.b)("strong",{parentName:"p"},"expression"),". A function expression can be stored in a variable."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const findProduct = function (a, b) {\n  return a * b;\n};\n")),Object(o.b)("p",null,"After a function expression has been stored in a variable, the variable can be used as a function. Functions stored in variables do not need function names. They are always called using the variable name."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const findSquare = function (num) {\n  return num * num;\n};\n\nconst squareOfTwo = findSquare(2); // Result: 4\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Note:")," With function expression, the function name can be omitted."))}l.isMDXComponent=!0},225:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return d}));var a=t(0),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=r.a.createContext({}),l=function(e){var n=r.a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=l(e.components);return r.a.createElement(u.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},m=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(t),m=a,d=p["".concat(i,".").concat(m)]||p[m]||b[m]||o;return t?r.a.createElement(d,c(c({ref:n},u),{},{components:t})):r.a.createElement(d,c({ref:n},u))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var u=2;u<o;u++)i[u]=t[u];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);
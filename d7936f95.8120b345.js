(window.webpackJsonp=window.webpackJsonp||[]).push([[131],{201:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return s}));var a=n(3),r=n(7),l=(n(0),n(225)),i={},o={unversionedId:"Week 04/session-11/var-let-const",id:"Week 04/session-11/var-let-const",isDocsHomePage:!1,title:"var-let-const",description:"var, let, and const \u2013 What's the Difference?",source:"@site/../coursebook/Week 04/session-11/var-let-const.md",slug:"/Week 04/session-11/var-let-const",permalink:"/Fundamentals-course/Week 04/session-11/var-let-const",editUrl:"https://github.com/gazaskygeeks/Fundamentals-course/edit/master/website/../coursebook/Week 04/session-11/var-let-const.md",version:"current",sidebar:"someSidebar",previous:{title:"resources",permalink:"/Fundamentals-course/Week 04/session-11/resources"},next:{title:"README",permalink:"/Fundamentals-course/Week 05/README"}},c=[{value:"JavaScript Scope",id:"javascript-scope",children:[]},{value:"Differences between (<code>var</code>, <code>let</code>, <code>const</code>)",id:"differences-between-var-let-const",children:[]},{value:"Wrap-up",id:"wrap-up",children:[]}],b={toc:c};function s(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h1",{id:"var-let-and-const--whats-the-difference"},Object(l.b)("inlineCode",{parentName:"h1"},"var"),", ",Object(l.b)("inlineCode",{parentName:"h1"},"let"),", and ",Object(l.b)("inlineCode",{parentName:"h1"},"const")," \u2013 What's the Difference?"),Object(l.b)("p",null,"One of the features that came with ES6 is the addition of ",Object(l.b)("inlineCode",{parentName:"p"},"let")," and ",Object(l.b)("inlineCode",{parentName:"p"},"const")," which can be used for variable declaration. The question now is, what makes them different from ",Object(l.b)("inlineCode",{parentName:"p"},"var")," which we've been using?"),Object(l.b)("p",null,"In this workshop, we'll discuss ",Object(l.b)("inlineCode",{parentName:"p"},"var"),", ",Object(l.b)("inlineCode",{parentName:"p"},"let")," and ",Object(l.b)("inlineCode",{parentName:"p"},"const")," with respect to their scope, use, and hoisting."),Object(l.b)("p",null,"Before we start, lets talk a bit about scope in JavaScript (we'll talk more about scope in the next workshop)."),Object(l.b)("h2",{id:"javascript-scope"},"JavaScript Scope"),Object(l.b)("p",null,"Scope is the accessibility of variables and functions in some particular part of your code during runtime. In other words, scope determines the visibility of variables and other resources in areas of your code. So, scope essentially means where your variables are available for use"),Object(l.b)("p",null,"Don't worry much about scope now, since it's not our topic for this workshop and we will talk about it more in the next workshop.But, we may come across the word ",Object(l.b)("strong",{parentName:"p"},"scope")," in this workshop, so be ready."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// simple example to illustrate a basic idea about scope\nvar x = 5; // I'm globally scoped, you can use me everywhere\n\nvar findSum = function (a, b) {\n  var y = 10; // You can only use me inside the findSum function\n  console.log(x); // Logs: 5\n  console.log(y); // Logs: 10\n  return a + b;\n};\n\nconsole.log(x); // Logs: 5\nconsole.log(y); // Logs: undefined\n")),Object(l.b)("h2",{id:"differences-between-var-let-const"},"Differences between (",Object(l.b)("inlineCode",{parentName:"h2"},"var"),", ",Object(l.b)("inlineCode",{parentName:"h2"},"let"),", ",Object(l.b)("inlineCode",{parentName:"h2"},"const"),")"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"1. ",Object(l.b)("inlineCode",{parentName:"strong"},"var"))),Object(l.b)("p",null,"Before the advent of ES6, ",Object(l.b)("inlineCode",{parentName:"p"},"var")," declarations ruled as a King. Let us get to understand ",Object(l.b)("inlineCode",{parentName:"p"},"var")," more."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"var")," variables can be re-declared:")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example (1)")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'// Re-declare var\n\nvar greeter = "hey hi";\n\nvar greeter = "say Hello instead";\n\nconsole.log(greeter); // result: say Hello instead\n')),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"var")," variables can be updated:")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example (2)")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'// Update var\n\nvar greeter = "hey hi";\n\ngreeter = "say Hello instead";\n\nconsole.log(greeter); // result: say Hello instead\n')),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Hoisting of ",Object(l.b)("inlineCode",{parentName:"p"},"var"),":"),Object(l.b)("p",{parentName:"li"},"Hoisting is a JavaScript mechanism where variables declarations are moved to the top of their scope(we'll talk more about scope in the next workshop) before code execution. What this means is that if we do:"))),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example (3)")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'console.log(greeter); // result: undefined\n\nvar greeter = "say hello";\n')),Object(l.b)("p",null,"...it is interpreted like"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example (4)")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'var greeter;\n\nconsole.log(greeter); // result: undefined\n\ngreeter = "say hello";\n\nconsole.log(greeter); // result: say hello\n')),Object(l.b)("p",null,"So, ",Object(l.b)("inlineCode",{parentName:"p"},"var")," variables are hoisted to the top of their scope and initialized with a value of ",Object(l.b)("inlineCode",{parentName:"p"},"undefined"),"."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"2. ",Object(l.b)("inlineCode",{parentName:"strong"},"let"))),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"let")," is preferred for variable declaration now. It's no surprise as it comes as an improvement to the ",Object(l.b)("inlineCode",{parentName:"p"},"var")," declarations."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example (1)")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'let greeting = "say Hi";\n\nlet times = 4;\n\nif (times > 3) {\n  let hello = "say Hello instead";\n\n  console.log(hello); // result: say Hello instead\n}\n')),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"p"},"let")," can be updated:"),Object(l.b)("p",{parentName:"li"},"Like ",Object(l.b)("inlineCode",{parentName:"p"},"var"),", ",Object(l.b)("inlineCode",{parentName:"p"},"let")," can be updated."))),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example (2)")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'let greeting = "say Hi";\n\ngreeting = "say Hello instead";\n\nconsole.log(greeting); // result: say Hello instead\n')),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"p"},"let")," declarations are hoisted to the top:"),Object(l.b)("p",{parentName:"li"},"Unlike ",Object(l.b)("inlineCode",{parentName:"p"},"var")," which is initialized with a value of ",Object(l.b)("inlineCode",{parentName:"p"},"undefined"),", the ",Object(l.b)("inlineCode",{parentName:"p"},"let")," keyword is not initialized. So if you try to use ",Object(l.b)("inlineCode",{parentName:"p"},"let")," variable before declaration, you'll get a Reference Error."))),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example (3)")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"console.log(greeting); // Uncaught ReferenceError: Cannot access 'greeting' before initialization.\n\nlet greeting = \"say Hello instead\";\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"let")," can't be re-declared:")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example (4)")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'// This will return an error:\n\nlet greeting = "say Hi";\n\nlet greeting = "say Hello instead"; //error: Identifier \'greeting\' has already been declared\n')),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"3. ",Object(l.b)("inlineCode",{parentName:"strong"},"const"))),Object(l.b)("p",null,"Variables declared with ",Object(l.b)("inlineCode",{parentName:"p"},"const")," maintain constant values. ",Object(l.b)("inlineCode",{parentName:"p"},"const")," declarations share some similarities with ",Object(l.b)("inlineCode",{parentName:"p"},"let")," declarations."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"p"},"const")," cannot be updated or re-declared:"),Object(l.b)("p",{parentName:"li"},"This means that the value of a variable declared with ",Object(l.b)("inlineCode",{parentName:"p"},"const")," remains the same. It cannot be updated or re-declared. So if we declare a variable with ",Object(l.b)("inlineCode",{parentName:"p"},"const"),", we can neither do:"))),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example (1)")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'const greeting = "say Hi";\n\ngreeting = "say Hello instead"; //error: Assignment to constant variable.\n')),Object(l.b)("p",null,"...nor"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example (2)")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'const greeting = "say Hi";\n\nconst greeting = "say Hello instead"; //error: Identifier \'greeting\' has already been declared\n')),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Hoisting of ",Object(l.b)("inlineCode",{parentName:"p"},"const"),":"),Object(l.b)("p",{parentName:"li"},"Just like ",Object(l.b)("inlineCode",{parentName:"p"},"let"),", ",Object(l.b)("inlineCode",{parentName:"p"},"const")," declarations are hoisted to the top but are not initialized."))),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example (3)")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"console.log(greeting); // Uncaught ReferenceError: Cannot access 'greeting' before initialization.\n\nconst greeting = \"say Hello instead\";\n")),Object(l.b)("h2",{id:"wrap-up"},"Wrap-up"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"p"},"var")," variables can be updated and re-declared within its scope; ",Object(l.b)("inlineCode",{parentName:"p"},"let")," variables can be updated but not re-declared; ",Object(l.b)("inlineCode",{parentName:"p"},"const")," variables can neither be updated nor re-declared.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"They are all hoisted to the top of their scope. But while ",Object(l.b)("inlineCode",{parentName:"p"},"var")," variables are initialized with undefined, ",Object(l.b)("inlineCode",{parentName:"p"},"let")," and ",Object(l.b)("inlineCode",{parentName:"p"},"const")," variables are not initialized.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"While ",Object(l.b)("inlineCode",{parentName:"p"},"var")," and ",Object(l.b)("inlineCode",{parentName:"p"},"let")," can be declared without being initialized, ",Object(l.b)("inlineCode",{parentName:"p"},"const")," must be initialized during declaration."))))}s.isMDXComponent=!0},225:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var b=r.a.createContext({}),s=function(e){var t=r.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),p=s(n),u=a,m=p["".concat(i,".").concat(u)]||p[u]||d[u]||l;return n?r.a.createElement(m,o(o({ref:t},b),{},{components:n})):r.a.createElement(m,o({ref:t},b))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var b=2;b<l;b++)i[b]=n[b];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);
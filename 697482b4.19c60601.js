(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{141:function(e,n,o){"use strict";o.r(n),o.d(n,"frontMatter",(function(){return r})),o.d(n,"metadata",(function(){return i})),o.d(n,"toc",(function(){return s})),o.d(n,"default",(function(){return p}));var t=o(3),a=o(7),c=(o(0),o(225)),r={},i={unversionedId:"Week 04/session-11/functions-scopes",id:"Week 04/session-11/functions-scopes",isDocsHomePage:!1,title:"functions-scopes",description:"JavaScript Scope",source:"@site/../coursebook/Week 04/session-11/functions-scopes.md",slug:"/Week 04/session-11/functions-scopes",permalink:"/Fundamentals-course/Week 04/session-11/functions-scopes",editUrl:"https://github.com/gazaskygeeks/Fundamentals-course/edit/master/website/../coursebook/Week 04/session-11/functions-scopes.md",version:"current",sidebar:"someSidebar",previous:{title:"exercises",permalink:"/Fundamentals-course/Week 04/session-11/exercises"},next:{title:"intro-to-functions",permalink:"/Fundamentals-course/Week 04/session-11/intro-to-functions"}},s=[{value:"What is Scope?",id:"what-is-scope",children:[]},{value:"Global Scope",id:"global-scope",children:[]},{value:"Local Scope",id:"local-scope",children:[{value:"Function Scope",id:"function-scope",children:[]},{value:"Block Scope",id:"block-scope",children:[]}]},{value:"Lexical Scope",id:"lexical-scope",children:[]},{value:"Nested Scopes",id:"nested-scopes",children:[]}],l={toc:s};function p(e){var n=e.components,o=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(t.a)({},l,o,{components:n,mdxType:"MDXLayout"}),Object(c.b)("h1",{id:"javascript-scope"},"JavaScript Scope"),Object(c.b)("h2",{id:"what-is-scope"},"What is Scope?"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Scope")," determines the visibility or accessibility of a variable or other resource in the area of your code. Scope refers to what the execution context of a particular piece of code is. One of the most important things this context determines is what variables are available to that piece of code."),Object(c.b)("p",null,"In ES5 JavaScript, scope is exclusively delimited by functions. In ES6 JavaScript, block-scoping has been introduced via the ",Object(c.b)("inlineCode",{parentName:"p"},"let")," and ",Object(c.b)("inlineCode",{parentName:"p"},"const")," keywords. Both these things will be explained further on."),Object(c.b)("h2",{id:"global-scope"},"Global Scope"),Object(c.b)("p",null,"There's only one ",Object(c.b)("strong",{parentName:"p"},"global")," scope in the JavaScript document. The area ",Object(c.b)("strong",{parentName:"p"},"outside")," all the functions is consider the global scope and the variables defined inside the global scope can be accessed and altered in any other scopes."),Object(c.b)("pre",null,Object(c.b)("code",Object(t.a)({parentName:"pre"},{className:"language-javascript"}),'// global scope\nlet fruit = "apple";\nconsole.log(fruit); // Logs: apple\n\nfunction getFruit() {\n  console.log(fruit); // Logs: apple\n  return fruit;\n}\n\ngetFruit(); // Returns: apple\n')),Object(c.b)("h2",{id:"local-scope"},"Local Scope"),Object(c.b)("p",null,"Variables that are usable only in a specific part of your code are considered to be in a local scope. These variables are also called local variables."),Object(c.b)("p",null,"In JavaScript, there are two kinds of local scope: function scope and block scope."),Object(c.b)("h3",{id:"function-scope"},"Function Scope"),Object(c.b)("p",null,"When you declare a variable in a function, you can access this variable only within that function. You can\u2019t get this variable once you get out of it."),Object(c.b)("pre",null,Object(c.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"// global scope (scope A)\nvar x = 5; // I'm globally scoped, I'm available everywhere\n\nfunction addFive() {\n  // local scope (scope B)\n  var y = 5; // y is now available in scope B, but not scope A\n  var plusFive = x + y; // x is available in scope B, because it was defined in global scope\n  return plusFive;\n}\n\nconsole.log(addFive()); // Returns: 10\nconsole.log(x); // Logs: 5\nconsole.log(y); // ReferenceError\n")),Object(c.b)("h3",{id:"block-scope"},"Block Scope"),Object(c.b)("p",null,"A ",Object(c.b)("strong",{parentName:"p"},"block scope")," is the area within ",Object(c.b)("inlineCode",{parentName:"p"},"if statement"),", ",Object(c.b)("inlineCode",{parentName:"p"},"switch conditions")," or ",Object(c.b)("inlineCode",{parentName:"p"},"for")," and ",Object(c.b)("inlineCode",{parentName:"p"},"while loops"),". Generally speaking, whenever you see ",Object(c.b)("strong",{parentName:"p"},"{curly brackets}"),", it is a ",Object(c.b)("strong",{parentName:"p"},"block"),". Block scoping was introduced to JavaScript via the ",Object(c.b)("inlineCode",{parentName:"p"},"let")," and ",Object(c.b)("inlineCode",{parentName:"p"},"const")," keywords, which are used to declare variables in the same way as ",Object(c.b)("inlineCode",{parentName:"p"},"var"),". The difference (in terms of scoping at least) is that while variables declared with ",Object(c.b)("inlineCode",{parentName:"p"},"var")," are available within the function in which they're defined, variables defined with ",Object(c.b)("inlineCode",{parentName:"p"},"let")," and ",Object(c.b)("inlineCode",{parentName:"p"},"const")," are only available within the block they're defined in:"),Object(c.b)("pre",null,Object(c.b)("code",Object(t.a)({parentName:"pre"},{className:"language-javascript"}),'// global scope\n\nvar bar = "bar";\n\nif (true) {\n  // local block scope A\n  let pam = bar + "pam"; // Value: barpam\n  const j = 0;\n  var k = 12;\n}\n\nfor (let i = 0; i < 10; i++) {\n  // local block scope B\n  console.log(i); // Logs: 0 1 2 3 ... 9 (a number in each iteration)\n\n  console.log(j); // ReferenceError\n  console.log(pam); // ReferenceError\n}\n\nconsole.log(k); // Logs: 12\nconsole.log(pam); // ReferenceError\nconsole.log(i); // ReferenceError\nconsole.log(j); // ReferenceError\n')),Object(c.b)("p",null,"So, lets add one more difference between ",Object(c.b)("inlineCode",{parentName:"p"},"var"),", ",Object(c.b)("inlineCode",{parentName:"p"},"let")," and ",Object(c.b)("inlineCode",{parentName:"p"},"const"),":"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Variables declared with ",Object(c.b)("inlineCode",{parentName:"li"},"var")," are function-scoped."),Object(c.b)("li",{parentName:"ul"},"Variables declared with ",Object(c.b)("inlineCode",{parentName:"li"},"let")," or ",Object(c.b)("inlineCode",{parentName:"li"},"const")," are block-scoped.")),Object(c.b)("h2",{id:"lexical-scope"},"Lexical Scope"),Object(c.b)("p",null,"Another point to mention is the lexical scope. ",Object(c.b)("strong",{parentName:"p"},"Lexical scope")," means the children scope has the access to the variables defined in the parent scope."),Object(c.b)("pre",null,Object(c.b)("code",Object(t.a)({parentName:"pre"},{className:"language-javascript"}),'function foo1() {\n  // local scope (A)\n  var fruit1 = "apple";\n  const fruit2 = "banana";\n  let fruit3 = "strawberry";\n  function foo2() {\n    // local scope (B) has access to its parent scope (A)\n    console.log(fruit1); // Logs: apple\n    console.log(fruit2); // Logs: banana\n    console.log(fruit3); // Logs: strawberry\n    return fruit1 + " " + fruit2 + " " + fruit3;\n  }\n  return foo2();\n}\n\nfoo1(); // Can you know the result ?\n')),Object(c.b)("h2",{id:"nested-scopes"},"Nested Scopes"),Object(c.b)("p",null,"Variables defined inside a function ",Object(c.b)("strong",{parentName:"p"},"cannot be accessed")," from anywhere ",Object(c.b)("strong",{parentName:"p"},"outside")," the function, because the variable is defined only in the scope of the function. However, a function can access all variables and functions defined inside its scope and inside its parent scope."),Object(c.b)("p",null,"More formally, each function has access to its own local scope, and also the scope of the function that encloses it (or global scope, if there is no enclosing function)."),Object(c.b)("pre",null,Object(c.b)("code",Object(t.a)({parentName:"pre"},{className:"language-javascript"}),'// global scope (scope A)\nconst a = "a";\n\nfunction bar() {\n  // local scope (scope B)\n  // Has access to: scope B and scope A\n  const b = "b";\n\n  function pam() {\n    // local scope (scope C)\n    // Has access to: scope C, scope B and scope A\n    const c = "c";\n    if (true) {\n      // local block scope (scope D)\n      // Has access to: scope D, scope C, scope B and scope A\n      const d = "d";\n      return d + c + b + a;\n    }\n  }\n\n  return pam();\n}\n\nconsole.log(a); // a\nconsole.log(bar()); // can you guess the result ?\nconsole.log(d); // ReferenceError\nconsole.log(b); // ReferenceError\nconsole.log(c); // ReferenceError\n')))}p.isMDXComponent=!0},225:function(e,n,o){"use strict";o.d(n,"a",(function(){return b})),o.d(n,"b",(function(){return f}));var t=o(0),a=o.n(t);function c(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function r(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function i(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?r(Object(o),!0).forEach((function(n){c(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function s(e,n){if(null==e)return{};var o,t,a=function(e,n){if(null==e)return{};var o,t,a={},c=Object.keys(e);for(t=0;t<c.length;t++)o=c[t],n.indexOf(o)>=0||(a[o]=e[o]);return a}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(t=0;t<c.length;t++)o=c[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var l=a.a.createContext({}),p=function(e){var n=a.a.useContext(l),o=n;return e&&(o="function"==typeof e?e(n):i(i({},n),e)),o},b=function(e){var n=p(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},d=a.a.forwardRef((function(e,n){var o=e.components,t=e.mdxType,c=e.originalType,r=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=p(o),d=t,f=b["".concat(r,".").concat(d)]||b[d]||u[d]||c;return o?a.a.createElement(f,i(i({ref:n},l),{},{components:o})):a.a.createElement(f,i({ref:n},l))}));function f(e,n){var o=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var c=o.length,r=new Array(c);r[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:t,r[1]=i;for(var l=2;l<c;l++)r[l]=o[l];return a.a.createElement.apply(null,r)}return a.a.createElement.apply(null,o)}d.displayName="MDXCreateElement"}}]);